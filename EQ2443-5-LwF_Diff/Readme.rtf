{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17140\viewh14460\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs32 \cf0 ################################################################################################\
# Description of Functions used\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 ################################################################################################\
\
1. LoadDataFromMat.py: Loading the data from the dataset location set in dataset path as per as dataset name. Performs also random partitioning in the case the files present are not already partitioned.\
\
2. LwF_based_ADMM.py: This file contains two functions:\
	a. LwF_based_ADMM_Diff_LS( \'85): This function performs the ADMM on the Layer 0 (first layer of the PLN) to find the composite W_ls matrix for the case of LwF for different datasets\
	\
	b. LwF_based_ADMM_Diff_O( \'85): This function performs the ADMM on each of the subsequent layers after layer 0, to find the composite matrix O for the case of LwF for different datasets\
\
3. PLN_Class.py: This function defines a class for creating a PLN object, where a single PLN object consists of V_Q ([ IQ, -IQ ]), O (Output matrix), R(random matrix, with the issue fixed for the case of Layer 0 and other layers L)\
\
4. Admm.py: This function is used for computing the O_matrix, just in case of Simple ADMM for PLN. Does not contain any implementation for LwF.\
\
5. main_newstruct.py: This is the main function consisting of several sub functions:\
\
	a. compute_Wls: This function is used for simply computing a least squares estimate in the Layer 0 of PLN\
\
	b. compute_ol: This function computes the Output matrix by calling the cdmm function\
\
	c. compute_accuracy: computes accuracy of testing by summing and comparing the labels using argmax function\
\
	d. compute_test_outputs: computes the test estimates by using the given network (which is a list of objects created using PLN_Class and trained using other functions)\
\
	e. compute_NME: This function computes the NME using the formula in the PLN paper.\
\
	f. compute_Wls_test_accuracy: This function computes the testing accuracy only for the case of Least Squares (layer 0)\
\
	g. compute_joint_datasets: This function creates input data and targets for joint training using input from 2 individual datasets.\
\
	h. param_tuning_for_LS: \
\
		i. in case of LwF for Layer 0, this consists of tuning the parameters for lambda_o (forgetting factor) using a value of mu (ADMM multiplier) (which has to be manually set) and epsilon_o (overfitting constraint). After finding that value for lambda_o as the argmax of the sweep of params for which test acc is highest, it optimises mu in the same way fixing the lambda_o, and then epsilon_o by fixing both lambda_o, mu.\
		\
		ii. In case of no LwF, tuning of lambda (least squares lagrangian multiplier) and mu (admm multiplier) is performed for the situation of joint training.\
\
	i. param_tuning_for_O_LwF:   in case of LwF for Layer 1,2\'85,L, this consists of tuning the parameters for lambda_o (forgetting factor) using a value of mu (ADMM multiplier) (which has to be manually set) and epsilon_o (overfitting constraint). After finding that value for lambda as the argmax of the sweep of params for which test acc is highest, it optimises mu in the same way fixing the lambda_o.\
\
	j. param_tuning_for_O:  For Layer 1,2\'85,L, this consists of tuning the parameters for mu (ADMM Multiplier) for the case of joint training. No LwF implementation is used here.\
\
	k. plot_acc_vs_hyperparameter: plots the curves for test acc for joint testing, individual testing for Old task and individual testing for new task, in a single figure versus the given hyper parameter which is being swept over.\
\
	l. PLN_with_ADMM: main function which implements a PLN for L number of layers. Based on Flags for LwF and whether parameter tuning is required or not, it tries to create a PLN network for L layers.\
\
	m. main: This function imports the datasets, creates augmented datasets for individual testing, and calls the above functions for simulating the different cases and checking accuracies. Dataset paths and names need to be set at the beginning of the file, and any params which are found for individual datasets can be set as parameters.\
\
###############################################################################################\
# There are other functions apart from the ones listed above, also present in the main_newstruct.py file, which are not relevant for the code and are commented or unused.\
###############################################################################################\
\
\
}